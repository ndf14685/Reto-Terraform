Reto técnico: Desplegar un clúster de Kubernetes en Digital Ocean con Nginx Ingress Controller, Prometheus y Grafana utilizando Terraform

Objetivo: Implementar una infraestructura de Kubernetes en Digital Ocean que incluya un controlador de ingreso Nginx, Prometheus y Grafana para monitoreo, utilizando Terraform para la automatización de la infraestructura. Esta infraestructura debe ser fácil de replicar en diferentes ambientes (Dev, Staging, Production, etc.) y mantener el código en un repositorio.

Consideraciones:
La infraestructura debe ser fácil de replicar en distintos ambientes (Dev, Staging, Production, etc.) utilizando variables y archivos de configuración específicos para cada ambiente.
Utilizar un enfoque modular para el código de Terraform, lo que permitirá una fácil actualización y mantenimiento de las diferentes versiones de la infraestructura.
Crear un archivo README.md con información detallada sobre cómo utilizar y desplegar el código de Terraform, incluyendo requisitos previos, instrucciones de configuración y comandos de despliegue.
Utilizar Terraform "Remote State" para facilitar el trabajo colaborativo y mantener un estado centralizado de la infraestructura.
No incluir credenciales en el repositorio de código. Utilizar variables de entorno o sistemas de almacenamiento de secretos para manejar las credenciales de forma segura.

Tareas:
Configure su entorno local con la clave de API de Digital Ocean utilizando variables de entorno o un sistema de almacenamiento de secretos.
Cree un repositorio de código para almacenar la configuración de Terraform y sus módulos.
Implemente la infraestructura utilizando un enfoque modular, con módulos para el clúster de Kubernetes, Nginx Ingress Controller, Prometheus y Grafana.
Utilice archivos de configuración específicos para cada ambiente y variables para personalizar la implementación en cada ambiente.
Implemente el uso de Terraform "Remote State" para mantener un estado centralizado y facilitar el trabajo colaborativo.
Documente en el archivo README.md cómo utilizar y desplegar el código de Terraform, incluyendo requisitos previos, instrucciones de configuración y comandos de despliegue.



Creacion de repo, readme y estructura basica de tf

Creacion de token y carga como variable temporal en mi local

Instalacion de tools: Terraform, Helm, Cliente de Digital Ocean, git, Cliente de digital Ocean --> doctl

Creacion de main.tf

Creacion de variables 

Creacion de outputs.tf

configuracion de kubectl con mi proyecto

Instalacion de nginx ingress controller usando Helm

Instalacion de Prometheus y Grafana 

Creacion de archivo values.yml para configuracion de Grafana en k8s

Configuracion de host, para que use mi host particular nestorfleitas.ar

Subida a github

Hasta ahi me funciono. Pero no estaba preparado para multiples ambientes. Es por eso que se tiene que crear localmente cuando se quiera implementar el terraforms.tfvars con los valores:
cluster_name = "NOMBRE_CLUSTER_AMBIENTE"  
domain               = "DOMINIO_SEGUN_AMBIENTE"
grafana_admin_password = "PASS_PARA_AMBIENTE"


Ahora sigo con el refactor, para modularizar

Reestucture la estructura de carpetas
Para poder mantener estado voy a tener que utilizar un S3 de digital ocean


Se tuvo que crear por consola grafica el space (bucket) llamado space-dev1 con region en nyc3 

Se cargaron las variables de entorno: 
DIG_OC_ACCESSKEY y DIG_OC_SECRETKEY

Se requiere generar un archivo en la raiz llamado backend.config y agregarlo al .gitignore. Este tendra este contenido::

access_key = ""
secret_key = ""

La primera vez se requerira ejecutar el terraform init de esta manera: 
$env:TF_VAR_access_key=$env:DIG_OC_ACCESSKEY
$env:TF_VAR_secret_key=$env:DIG_OC_SECRETKEY
terraform init -backend-config="access_key=$($env:TF_VAR_access_key)" -backend-config="secret_key=$($env:TF_VAR_secret_key)"
